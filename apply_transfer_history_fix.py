#!/usr/bin/env python3
"""
Script para aplicar la correcci√≥n del historial de transferencias
Agrega el campo organizacion_propietaria para filtrar correctamente
"""
import mysql.connector
import sys

def apply_migration():
    """Aplicar la migraci√≥n para corregir el historial de transferencias"""
    print("=== APLICANDO CORRECCI√ìN HISTORIAL TRANSFERENCIAS ===")
    
    try:
        # Conectar a la base de datos
        connection = mysql.connector.connect(
            host='localhost',
            port=3306,
            database='ong_management',
            user='root',
            password='root'
        )
        
        cursor = connection.cursor()
        
        # Verificar si el campo ya existe
        cursor.execute("""
            SELECT COUNT(*) 
            FROM INFORMATION_SCHEMA.COLUMNS 
            WHERE TABLE_SCHEMA = 'ong_management' 
            AND TABLE_NAME = 'transferencias_donaciones' 
            AND COLUMN_NAME = 'organizacion_propietaria'
        """)
        
        field_exists = cursor.fetchone()[0] > 0
        
        if field_exists:
            print("‚úÖ El campo organizacion_propietaria ya existe")
        else:
            print("üìù Agregando campo organizacion_propietaria...")
            
            # Agregar campo
            cursor.execute("""
                ALTER TABLE transferencias_donaciones 
                ADD COLUMN organizacion_propietaria VARCHAR(100) DEFAULT 'empuje-comunitario'
            """)
            
            print("‚úÖ Campo agregado exitosamente")
        
        # Actualizar registros existentes
        print("üìù Actualizando registros existentes...")
        
        # Para transferencias enviadas, la organizaci√≥n propietaria es empuje-comunitario
        cursor.execute("""
            UPDATE transferencias_donaciones 
            SET organizacion_propietaria = 'empuje-comunitario' 
            WHERE tipo = 'ENVIADA' AND (organizacion_propietaria IS NULL OR organizacion_propietaria = '')
        """)
        
        enviadas_updated = cursor.rowcount
        
        # Para transferencias recibidas, tambi√©n empuje-comunitario por ahora
        cursor.execute("""
            UPDATE transferencias_donaciones 
            SET organizacion_propietaria = 'empuje-comunitario' 
            WHERE tipo = 'RECIBIDA' AND (organizacion_propietaria IS NULL OR organizacion_propietaria = '')
        """)
        
        recibidas_updated = cursor.rowcount
        
        print(f"‚úÖ Actualizados {enviadas_updated} registros ENVIADAS")
        print(f"‚úÖ Actualizados {recibidas_updated} registros RECIBIDAS")
        
        # Crear √≠ndice si no existe
        try:
            cursor.execute("""
                CREATE INDEX idx_transferencias_organizacion_propietaria 
                ON transferencias_donaciones(organizacion_propietaria, fecha_transferencia DESC)
            """)
            print("‚úÖ √çndice creado exitosamente")
        except mysql.connector.Error as e:
            if "Duplicate key name" in str(e):
                print("‚úÖ √çndice ya existe")
            else:
                print(f"‚ö†Ô∏è  Error creando √≠ndice: {e}")
        
        # Hacer el campo NOT NULL si no lo es
        try:
            cursor.execute("""
                ALTER TABLE transferencias_donaciones 
                MODIFY COLUMN organizacion_propietaria VARCHAR(100) NOT NULL
            """)
            print("‚úÖ Campo configurado como NOT NULL")
        except mysql.connector.Error as e:
            print(f"‚ö†Ô∏è  Error configurando NOT NULL: {e}")
        
        # Commit cambios
        connection.commit()
        
        # Verificar resultado
        cursor.execute("""
            SELECT 
                organizacion_propietaria,
                tipo,
                COUNT(*) as cantidad
            FROM transferencias_donaciones 
            GROUP BY organizacion_propietaria, tipo
            ORDER BY organizacion_propietaria, tipo
        """)
        
        results = cursor.fetchall()
        
        print("\nüìä RESUMEN DE TRANSFERENCIAS POR ORGANIZACI√ìN:")
        for org, tipo, cantidad in results:
            print(f"   {org} - {tipo}: {cantidad} transferencias")
        
        cursor.close()
        connection.close()
        
        print("\n‚úÖ MIGRACI√ìN COMPLETADA EXITOSAMENTE")
        return True
        
    except mysql.connector.Error as e:
        print(f"‚ùå Error de base de datos: {e}")
        return False
    except Exception as e:
        print(f"‚ùå Error inesperado: {e}")
        return False

def verify_migration():
    """Verificar que la migraci√≥n se aplic√≥ correctamente"""
    print("\n=== VERIFICANDO MIGRACI√ìN ===")
    
    try:
        connection = mysql.connector.connect(
            host='localhost',
            port=3306,
            database='ong_management',
            user='root',
            password='root'
        )
        
        cursor = connection.cursor()
        
        # Verificar estructura de la tabla
        cursor.execute("""
            DESCRIBE transferencias_donaciones
        """)
        
        columns = cursor.fetchall()
        
        print("üìã ESTRUCTURA DE LA TABLA:")
        for column in columns:
            field, type_info, null, key, default, extra = column
            print(f"   {field}: {type_info} {'(NOT NULL)' if null == 'NO' else '(NULL)'}")
        
        # Verificar datos
        cursor.execute("""
            SELECT COUNT(*) FROM transferencias_donaciones
        """)
        
        total_count = cursor.fetchone()[0]
        print(f"\nüìä Total de transferencias: {total_count}")
        
        cursor.close()
        connection.close()
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error verificando migraci√≥n: {e}")
        return False

def main():
    """Funci√≥n principal"""
    print("üîß CORRECCI√ìN HISTORIAL DE TRANSFERENCIAS")
    print("="*60)
    
    # Aplicar migraci√≥n
    migration_success = apply_migration()
    
    if migration_success:
        # Verificar migraci√≥n
        verify_migration()
        
        print("\n" + "="*60)
        print("üéâ CORRECCI√ìN COMPLETADA")
        print("="*60)
        print("‚úÖ El historial de transferencias ahora se filtra correctamente por organizaci√≥n")
        print("‚úÖ Cada organizaci√≥n ver√° solo sus propias transferencias")
        print("‚úÖ Los registros existentes han sido actualizados")
        
        print("\nüîÑ PR√ìXIMOS PASOS:")
        print("1. Reiniciar el API Gateway para aplicar los cambios en el c√≥digo")
        print("2. Probar el historial de transferencias en el frontend")
        print("3. Verificar que cada organizaci√≥n vea solo sus transferencias")
        
    else:
        print("\n‚ùå LA MIGRACI√ìN FALL√ì")
        print("Revisa los errores anteriores y corrige los problemas")

if __name__ == "__main__":
    main()