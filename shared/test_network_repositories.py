#!/usr/bin/env python3
"""
Script de prueba para verificar el funcionamiento de los repositorios de red
Ejecutar despu√©s de aplicar las migraciones de base de datos
"""

import sys
import os
from datetime import datetime, timedelta

# Agregar paths necesarios
sys.path.append(os.path.dirname(__file__))
sys.path.append(os.path.join(os.path.dirname(__file__), '..', 'user-service', 'src'))
sys.path.append(os.path.join(os.path.dirname(__file__), '..', 'inventory-service', 'src'))
sys.path.append(os.path.join(os.path.dirname(__file__), '..', 'events-service', 'src'))

try:
    from network_repository import NetworkRepository
    from external_requests_repository import ExternalRequestsRepository
    from external_events_repository import ExternalEventsRepository
except ImportError as e:
    print(f"‚ùå Error importando repositorios: {e}")
    print("Aseg√∫rate de que las migraciones de base de datos se hayan ejecutado correctamente")
    sys.exit(1)


def test_network_repository():
    """Prueba el repositorio principal de red"""
    print("üß™ Probando NetworkRepository...")
    
    repo = NetworkRepository()
    
    # Probar configuraci√≥n de organizaci√≥n
    org_id = repo.get_organization_id()
    print(f"‚úÖ ID de organizaci√≥n: {org_id}")
    
    # Probar configuraci√≥n de Kafka
    kafka_enabled = repo.is_kafka_enabled()
    print(f"‚úÖ Kafka habilitado: {kafka_enabled}")
    
    # Probar creaci√≥n de oferta externa
    test_offer = repo.create_external_offer(
        "test-org", 
        "TEST-001", 
        [{"categoria": "ALIMENTOS", "descripcion": "Test food", "cantidad": "10 units"}]
    )
    if test_offer:
        print(f"‚úÖ Oferta externa creada: {test_offer['id']}")
        
        # Probar obtenci√≥n de ofertas
        offers = repo.get_active_external_offers()
        print(f"‚úÖ Ofertas activas encontradas: {len(offers)}")
    else:
        print("‚ùå Error creando oferta externa")
    
    # Probar registro de transferencia
    transfer = repo.create_transfer_record(
        "ENVIADA", 
        "test-org", 
        "REQ-001", 
        [{"categoria": "ALIMENTOS", "descripcion": "Test transfer", "cantidad": "5 units"}],
        1,  # usuario_registro
        "Transferencia de prueba"
    )
    if transfer:
        print(f"‚úÖ Transferencia registrada: {transfer['id']}")
    else:
        print("‚ùå Error registrando transferencia")
    
    print("‚úÖ NetworkRepository funcionando correctamente\n")


def test_external_requests_repository():
    """Prueba el repositorio de solicitudes externas"""
    print("üß™ Probando ExternalRequestsRepository...")
    
    repo = ExternalRequestsRepository()
    
    # Probar creaci√≥n de solicitud externa
    test_request = repo.create_external_request(
        "test-org-2",
        "REQ-TEST-001",
        [{"categoria": "ROPA", "descripcion": "Test clothing", "cantidad": "15 items"}]
    )
    if test_request:
        print(f"‚úÖ Solicitud externa creada: {test_request['id']}")
        
        # Probar obtenci√≥n de solicitudes activas
        requests = repo.get_active_external_requests()
        print(f"‚úÖ Solicitudes activas encontradas: {len(requests)}")
        
        # Probar b√∫squeda por categor√≠a
        clothing_requests = repo.get_requests_by_category("ROPA")
        print(f"‚úÖ Solicitudes de ROPA encontradas: {len(clothing_requests)}")
    else:
        print("‚ùå Error creando solicitud externa")
    
    # Probar estad√≠sticas
    stats = repo.get_requests_statistics()
    print(f"‚úÖ Estad√≠sticas obtenidas: {stats['total_active']} activas, {stats['total_inactive']} inactivas")
    
    print("‚úÖ ExternalRequestsRepository funcionando correctamente\n")


def test_external_events_repository():
    """Prueba el repositorio de eventos externos"""
    print("üß™ Probando ExternalEventsRepository...")
    
    repo = ExternalEventsRepository()
    
    # Probar creaci√≥n de evento externo
    future_date = datetime.now() + timedelta(days=15)
    test_event = repo.create_external_event(
        "test-org-3",
        "EVT-TEST-001",
        "Evento de Prueba",
        "Descripci√≥n del evento de prueba",
        future_date
    )
    if test_event:
        print(f"‚úÖ Evento externo creado: {test_event['id']}")
        
        # Probar obtenci√≥n de eventos activos
        events = repo.get_active_external_events()
        print(f"‚úÖ Eventos activos encontrados: {len(events)}")
        
        # Probar eventos pr√≥ximos
        upcoming = repo.get_upcoming_events(30)
        print(f"‚úÖ Eventos pr√≥ximos (30 d√≠as): {len(upcoming)}")
        
        # Probar b√∫squeda de eventos
        search_results = repo.search_events("Prueba")
        print(f"‚úÖ Eventos encontrados con 'Prueba': {len(search_results)}")
    else:
        print("‚ùå Error creando evento externo")
    
    # Probar estad√≠sticas
    stats = repo.get_events_statistics()
    print(f"‚úÖ Estad√≠sticas obtenidas: {stats['total_active']} activos, {stats['upcoming_events']} pr√≥ximos")
    
    print("‚úÖ ExternalEventsRepository funcionando correctamente\n")


def main():
    """Ejecuta todas las pruebas"""
    print("üöÄ Iniciando pruebas de repositorios de red de ONGs\n")
    
    try:
        test_network_repository()
        test_external_requests_repository()
        test_external_events_repository()
        
        print("üéâ Todas las pruebas completadas exitosamente!")
        print("‚úÖ Los repositorios de red est√°n funcionando correctamente")
        print("‚úÖ Las tablas de base de datos est√°n configuradas correctamente")
        print("‚úÖ Los √≠ndices de optimizaci√≥n est√°n aplicados")
        
    except Exception as e:
        print(f"‚ùå Error durante las pruebas: {e}")
        print("Verifica que:")
        print("1. La base de datos est√© ejecut√°ndose")
        print("2. Las migraciones se hayan aplicado correctamente")
        print("3. Los archivos de repositorio est√©n en las ubicaciones correctas")
        sys.exit(1)


if __name__ == "__main__":
    main()